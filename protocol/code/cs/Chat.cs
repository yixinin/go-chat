// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: chat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from chat.proto</summary>
  public static partial class ChatReflection {

    #region Descriptor
    /// <summary>File descriptor for chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpjaGF0LnByb3RvEghwcm90b2NvbBoMaGVhZGVyLnByb3RvIr4BCg5TZW5k",
            "TWVzc2FnZVJlcRIjCgZoZWFkZXIYASABKAsyEy5wcm90b2NvbC5SZXFIZWFk",
            "ZXISKgoLbWVzc2FnZVR5cGUYAiABKA4yFS5wcm90b2NvbC5NZXNzYWdlVHlw",
            "ZRITCgt0ZXh0TWVzc2FnZRgDIAEoCRIQCghtZW10aW9ucxgEIAMoCRIRCglj",
            "b250YWN0SWQYBSABKAkSEAoIdXNlcm5hbWUYBiABKAkSDwoHZ3JvdXBJZBgH",
            "IAEoCSI1Cg5TZW5kTWVzc2FnZUFjaxIjCgZoZWFkZXIYASABKAsyEy5wcm90",
            "b2NvbC5BY2tIZWFkZXIiYgoLUmVhbFRpbWVSZXESIwoGaGVhZGVyGAEgASgL",
            "MhMucHJvdG9jb2wuUmVxSGVhZGVyEgsKA3VpZBgCIAEoAxIPCgdncm91cElk",
            "GAMgASgJEhAKCHByb3RvY29sGAQgASgJIoQBCgtSZWFsVGltZUFjaxIjCgZo",
            "ZWFkZXIYASABKAsyEy5wcm90b2NvbC5BY2tIZWFkZXISDwoHdGNwQWRkchgC",
            "IAEoCRINCgV0b2tlbhgDIAEoCRIOCgZyb29tSWQYBCABKAUSDgoGd3NBZGRy",
            "GAUgASgJEhAKCGh0dHBBZGRyGAYgASgJIi8KClNpbXBsZVVzZXISEAoIbmlj",
            "a25hbWUYASABKAkSDwoHYXZhdGFydBgCIAEoCSKjAQoMUmVhbFRpbWVJbmZv",
            "Eg4KBndzQWRkchgBIAEoCRIPCgd0Y3BBZGRyGAIgASgJEg0KBXRva2VuGAMg",
            "ASgJEg4KBnJvb21JZBgEIAEoBRILCgN1aWQYBSABKAMSDwoHZ3JvdXBJZBgG",
            "IAEoCRIjCgV1c2VycxgHIAMoCzIULnByb3RvY29sLlNpbXBsZVVzZXISEAoI",
            "aHR0cEFkZHIYCCABKAkiOAoRQ2FuY2VsUmVhbFRpbWVSZXESIwoGaGVhZGVy",
            "GAEgASgLMhMucHJvdG9jb2wuUmVxSGVhZGVyIjgKEUNhbmNlbFJlYWxUaW1l",
            "QWNrEiMKBmhlYWRlchgBIAEoCzITLnByb3RvY29sLkFja0hlYWRlciJ3Cg5S",
            "ZWFsVGltZU5vdGlmeRIkCgZoZWFkZXIYASABKAsyFC5wcm90b2NvbC5Ob3Rp",
            "SGVhZGVyEhEKCUlzQ29ubmVjdBgCIAEoCBIsCgxyZWFsVGltZUluZm8YAyAB",
            "KAsyFi5wcm90b2NvbC5SZWFsVGltZUluZm8iNQoOUG9sbE1lc3NhZ2VSZXES",
            "IwoGaGVhZGVyGAEgASgLMhMucHJvdG9jb2wuUmVxSGVhZGVyIo4CCg5Qb2xs",
            "TWVzc2FnZUFjaxIjCgZoZWFkZXIYASABKAsyEy5wcm90b2NvbC5BY2tIZWFk",
            "ZXISDQoFdG90YWwYAiABKAUSLwoEZGF0YRgDIAMoCzIhLnByb3RvY29sLlBv",
            "bGxNZXNzYWdlQWNrLkRhdGFJdGVtGpYBCghEYXRhSXRlbRIMCgR0ZXh0GAEg",
            "ASgJEg8KB2Zyb21VaWQYAiABKAMSDQoFdG9VaWQYAyABKAMSDwoHZ3JvdXBJ",
            "ZBgEIAEoAxITCgttZXNzYWdlVHlwZRgFIAEoBRIQCghtZWRpYVVybBgGIAEo",
            "CRISCgpjcmVhdGVUaW1lGAcgASgDEhAKCG1lbXRpb25zGBAgAygJIi4KB1Bv",
            "bGxSZXESIwoGaGVhZGVyGAEgASgLMhMucHJvdG9jb2wuUmVxSGVhZGVyIpIC",
            "CgdQb2xsQWNrEiMKBmhlYWRlchgBIAEoCzITLnByb3RvY29sLkFja0hlYWRl",
            "chInCgRtc2dzGAIgAygLMhkucHJvdG9jb2wuUG9sbEFjay5NZXNzYWdlEiwK",
            "CHJlYWxUaW1lGAMgASgLMhoucHJvdG9jb2wuUG9sbEFjay5SZWFsVGltZRo+",
            "CgdNZXNzYWdlEg0KBUNvdW50GAEgASgFEhMKC21lc3NhZ2VLaW5kGAIgASgF",
            "Eg8KB2dyb3VwSWQYAyABKAkaSwoIUmVhbFRpbWUSEQoJSXNDb25uZWN0GAIg",
            "ASgIEiwKDHJlYWxUaW1lSW5mbxgDIAEoCzIWLnByb3RvY29sLlJlYWxUaW1l",
            "SW5mbypOCgtNZXNzYWdlVHlwZRIICgROb25lEAASCAoEVGV4dBABEgsKB1Bp",
            "Y3RydWUQAhIJCgVBdWRpbxADEgkKBVZpZGVvEAQSCAoETGluaxAFYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.MessageType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SendMessageReq), global::Protocol.SendMessageReq.Parser, new[]{ "Header", "MessageType", "TextMessage", "Memtions", "ContactId", "Username", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SendMessageAck), global::Protocol.SendMessageAck.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RealTimeReq), global::Protocol.RealTimeReq.Parser, new[]{ "Header", "Uid", "GroupId", "Protocol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RealTimeAck), global::Protocol.RealTimeAck.Parser, new[]{ "Header", "TcpAddr", "Token", "RoomId", "WsAddr", "HttpAddr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SimpleUser), global::Protocol.SimpleUser.Parser, new[]{ "Nickname", "Avatart" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RealTimeInfo), global::Protocol.RealTimeInfo.Parser, new[]{ "WsAddr", "TcpAddr", "Token", "RoomId", "Uid", "GroupId", "Users", "HttpAddr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CancelRealTimeReq), global::Protocol.CancelRealTimeReq.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CancelRealTimeAck), global::Protocol.CancelRealTimeAck.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RealTimeNotify), global::Protocol.RealTimeNotify.Parser, new[]{ "Header", "IsConnect", "RealTimeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollMessageReq), global::Protocol.PollMessageReq.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollMessageAck), global::Protocol.PollMessageAck.Parser, new[]{ "Header", "Total", "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollMessageAck.Types.DataItem), global::Protocol.PollMessageAck.Types.DataItem.Parser, new[]{ "Text", "FromUid", "ToUid", "GroupId", "MessageType", "MediaUrl", "CreateTime", "Memtions" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollReq), global::Protocol.PollReq.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollAck), global::Protocol.PollAck.Parser, new[]{ "Header", "Msgs", "RealTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollAck.Types.Message), global::Protocol.PollAck.Types.Message.Parser, new[]{ "Count", "MessageKind", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.PollAck.Types.RealTime), global::Protocol.PollAck.Types.RealTime.Parser, new[]{ "IsConnect", "RealTimeInfo" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum MessageType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Text")] Text = 1,
    [pbr::OriginalName("Pictrue")] Pictrue = 2,
    [pbr::OriginalName("Audio")] Audio = 3,
    [pbr::OriginalName("Video")] Video = 4,
    [pbr::OriginalName("Link")] Link = 5,
  }

  #endregion

  #region Messages
  public sealed partial class SendMessageReq : pb::IMessage<SendMessageReq> {
    private static readonly pb::MessageParser<SendMessageReq> _parser = new pb::MessageParser<SendMessageReq>(() => new SendMessageReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageReq(SendMessageReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      messageType_ = other.messageType_;
      textMessage_ = other.textMessage_;
      memtions_ = other.memtions_.Clone();
      contactId_ = other.contactId_;
      username_ = other.username_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageReq Clone() {
      return new SendMessageReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 2;
    private global::Protocol.MessageType messageType_ = global::Protocol.MessageType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.MessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "textMessage" field.</summary>
    public const int TextMessageFieldNumber = 3;
    private string textMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextMessage {
      get { return textMessage_; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memtions" field.</summary>
    public const int MemtionsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_memtions_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> memtions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Memtions {
      get { return memtions_; }
    }

    /// <summary>Field number for the "contactId" field.</summary>
    public const int ContactIdFieldNumber = 5;
    private string contactId_ = "";
    /// <summary>
    ///发送给用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactId {
      get { return contactId_; }
      set {
        contactId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 6;
    private string username_ = "";
    /// <summary>
    ///发送给陌生人 //通过群聊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 7;
    private string groupId_ = "";
    /// <summary>
    ///发送给群聊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (MessageType != other.MessageType) return false;
      if (TextMessage != other.TextMessage) return false;
      if(!memtions_.Equals(other.memtions_)) return false;
      if (ContactId != other.ContactId) return false;
      if (Username != other.Username) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (MessageType != global::Protocol.MessageType.None) hash ^= MessageType.GetHashCode();
      if (TextMessage.Length != 0) hash ^= TextMessage.GetHashCode();
      hash ^= memtions_.GetHashCode();
      if (ContactId.Length != 0) hash ^= ContactId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (MessageType != global::Protocol.MessageType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MessageType);
      }
      if (TextMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TextMessage);
      }
      memtions_.WriteTo(output, _repeated_memtions_codec);
      if (ContactId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ContactId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Username);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (MessageType != global::Protocol.MessageType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (TextMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      size += memtions_.CalculateSize(_repeated_memtions_codec);
      if (ContactId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMessageReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.MessageType != global::Protocol.MessageType.None) {
        MessageType = other.MessageType;
      }
      if (other.TextMessage.Length != 0) {
        TextMessage = other.TextMessage;
      }
      memtions_.Add(other.memtions_);
      if (other.ContactId.Length != 0) {
        ContactId = other.ContactId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            MessageType = (global::Protocol.MessageType) input.ReadEnum();
            break;
          }
          case 26: {
            TextMessage = input.ReadString();
            break;
          }
          case 34: {
            memtions_.AddEntriesFrom(input, _repeated_memtions_codec);
            break;
          }
          case 42: {
            ContactId = input.ReadString();
            break;
          }
          case 50: {
            Username = input.ReadString();
            break;
          }
          case 58: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendMessageAck : pb::IMessage<SendMessageAck> {
    private static readonly pb::MessageParser<SendMessageAck> _parser = new pb::MessageParser<SendMessageAck>(() => new SendMessageAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMessageAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageAck(SendMessageAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageAck Clone() {
      return new SendMessageAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMessageAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMessageAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMessageAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RealTimeReq : pb::IMessage<RealTimeReq> {
    private static readonly pb::MessageParser<RealTimeReq> _parser = new pb::MessageParser<RealTimeReq>(() => new RealTimeReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RealTimeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeReq(RealTimeReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      uid_ = other.uid_;
      groupId_ = other.groupId_;
      protocol_ = other.protocol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeReq Clone() {
      return new RealTimeReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    /// <summary>
    ///请求和用户通话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private string groupId_ = "";
    /// <summary>
    ///请求视频会议
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 4;
    private string protocol_ = "";
    /// <summary>
    ///协议
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RealTimeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RealTimeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Uid != other.Uid) return false;
      if (GroupId != other.GroupId) return false;
      if (Protocol != other.Protocol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (Protocol.Length != 0) hash ^= Protocol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GroupId);
      }
      if (Protocol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Protocol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RealTimeReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.Protocol.Length != 0) {
        Protocol = other.Protocol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 26: {
            GroupId = input.ReadString();
            break;
          }
          case 34: {
            Protocol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RealTimeAck : pb::IMessage<RealTimeAck> {
    private static readonly pb::MessageParser<RealTimeAck> _parser = new pb::MessageParser<RealTimeAck>(() => new RealTimeAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RealTimeAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeAck(RealTimeAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      tcpAddr_ = other.tcpAddr_;
      token_ = other.token_;
      roomId_ = other.roomId_;
      wsAddr_ = other.wsAddr_;
      httpAddr_ = other.httpAddr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeAck Clone() {
      return new RealTimeAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "tcpAddr" field.</summary>
    public const int TcpAddrFieldNumber = 2;
    private string tcpAddr_ = "";
    /// <summary>
    ///服务器连接地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpAddr {
      get { return tcpAddr_; }
      set {
        tcpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///本次连接token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 4;
    private int roomId_;
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "wsAddr" field.</summary>
    public const int WsAddrFieldNumber = 5;
    private string wsAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WsAddr {
      get { return wsAddr_; }
      set {
        wsAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "httpAddr" field.</summary>
    public const int HttpAddrFieldNumber = 6;
    private string httpAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAddr {
      get { return httpAddr_; }
      set {
        httpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RealTimeAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RealTimeAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (TcpAddr != other.TcpAddr) return false;
      if (Token != other.Token) return false;
      if (RoomId != other.RoomId) return false;
      if (WsAddr != other.WsAddr) return false;
      if (HttpAddr != other.HttpAddr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (TcpAddr.Length != 0) hash ^= TcpAddr.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (WsAddr.Length != 0) hash ^= WsAddr.GetHashCode();
      if (HttpAddr.Length != 0) hash ^= HttpAddr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (TcpAddr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TcpAddr);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (RoomId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomId);
      }
      if (WsAddr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WsAddr);
      }
      if (HttpAddr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HttpAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (TcpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TcpAddr);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (WsAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WsAddr);
      }
      if (HttpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAddr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RealTimeAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.TcpAddr.Length != 0) {
        TcpAddr = other.TcpAddr;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.WsAddr.Length != 0) {
        WsAddr = other.WsAddr;
      }
      if (other.HttpAddr.Length != 0) {
        HttpAddr = other.HttpAddr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            TcpAddr = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            RoomId = input.ReadInt32();
            break;
          }
          case 42: {
            WsAddr = input.ReadString();
            break;
          }
          case 50: {
            HttpAddr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleUser : pb::IMessage<SimpleUser> {
    private static readonly pb::MessageParser<SimpleUser> _parser = new pb::MessageParser<SimpleUser>(() => new SimpleUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleUser(SimpleUser other) : this() {
      nickname_ = other.nickname_;
      avatart_ = other.avatart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleUser Clone() {
      return new SimpleUser(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatart" field.</summary>
    public const int AvatartFieldNumber = 2;
    private string avatart_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatart {
      get { return avatart_; }
      set {
        avatart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      if (Avatart != other.Avatart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Avatart.Length != 0) hash ^= Avatart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (Avatart.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Avatart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Avatart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatart);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleUser other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Avatart.Length != 0) {
        Avatart = other.Avatart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
          case 18: {
            Avatart = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RealTimeInfo : pb::IMessage<RealTimeInfo> {
    private static readonly pb::MessageParser<RealTimeInfo> _parser = new pb::MessageParser<RealTimeInfo>(() => new RealTimeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RealTimeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeInfo(RealTimeInfo other) : this() {
      wsAddr_ = other.wsAddr_;
      tcpAddr_ = other.tcpAddr_;
      token_ = other.token_;
      roomId_ = other.roomId_;
      uid_ = other.uid_;
      groupId_ = other.groupId_;
      users_ = other.users_.Clone();
      httpAddr_ = other.httpAddr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeInfo Clone() {
      return new RealTimeInfo(this);
    }

    /// <summary>Field number for the "wsAddr" field.</summary>
    public const int WsAddrFieldNumber = 1;
    private string wsAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WsAddr {
      get { return wsAddr_; }
      set {
        wsAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tcpAddr" field.</summary>
    public const int TcpAddrFieldNumber = 2;
    private string tcpAddr_ = "";
    /// <summary>
    ///服务器连接地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpAddr {
      get { return tcpAddr_; }
      set {
        tcpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    ///本次连接token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 4;
    private int roomId_;
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 5;
    private long uid_;
    /// <summary>
    ///来自用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 6;
    private string groupId_ = "";
    /// <summary>
    ///来自群聊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.SimpleUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(58, global::Protocol.SimpleUser.Parser);
    private readonly pbc::RepeatedField<global::Protocol.SimpleUser> users_ = new pbc::RepeatedField<global::Protocol.SimpleUser>();
    /// <summary>
    ///用户/群名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.SimpleUser> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "httpAddr" field.</summary>
    public const int HttpAddrFieldNumber = 8;
    private string httpAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAddr {
      get { return httpAddr_; }
      set {
        httpAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RealTimeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RealTimeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WsAddr != other.WsAddr) return false;
      if (TcpAddr != other.TcpAddr) return false;
      if (Token != other.Token) return false;
      if (RoomId != other.RoomId) return false;
      if (Uid != other.Uid) return false;
      if (GroupId != other.GroupId) return false;
      if(!users_.Equals(other.users_)) return false;
      if (HttpAddr != other.HttpAddr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WsAddr.Length != 0) hash ^= WsAddr.GetHashCode();
      if (TcpAddr.Length != 0) hash ^= TcpAddr.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= users_.GetHashCode();
      if (HttpAddr.Length != 0) hash ^= HttpAddr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WsAddr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WsAddr);
      }
      if (TcpAddr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TcpAddr);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (RoomId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Uid);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupId);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (HttpAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HttpAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WsAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WsAddr);
      }
      if (TcpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TcpAddr);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (HttpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAddr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RealTimeInfo other) {
      if (other == null) {
        return;
      }
      if (other.WsAddr.Length != 0) {
        WsAddr = other.WsAddr;
      }
      if (other.TcpAddr.Length != 0) {
        TcpAddr = other.TcpAddr;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      users_.Add(other.users_);
      if (other.HttpAddr.Length != 0) {
        HttpAddr = other.HttpAddr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WsAddr = input.ReadString();
            break;
          }
          case 18: {
            TcpAddr = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            RoomId = input.ReadInt32();
            break;
          }
          case 40: {
            Uid = input.ReadInt64();
            break;
          }
          case 50: {
            GroupId = input.ReadString();
            break;
          }
          case 58: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 66: {
            HttpAddr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelRealTimeReq : pb::IMessage<CancelRealTimeReq> {
    private static readonly pb::MessageParser<CancelRealTimeReq> _parser = new pb::MessageParser<CancelRealTimeReq>(() => new CancelRealTimeReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelRealTimeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelRealTimeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelRealTimeReq(CancelRealTimeReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelRealTimeReq Clone() {
      return new CancelRealTimeReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelRealTimeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelRealTimeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelRealTimeReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelRealTimeAck : pb::IMessage<CancelRealTimeAck> {
    private static readonly pb::MessageParser<CancelRealTimeAck> _parser = new pb::MessageParser<CancelRealTimeAck>(() => new CancelRealTimeAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelRealTimeAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelRealTimeAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelRealTimeAck(CancelRealTimeAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelRealTimeAck Clone() {
      return new CancelRealTimeAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelRealTimeAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelRealTimeAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelRealTimeAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RealTimeNotify : pb::IMessage<RealTimeNotify> {
    private static readonly pb::MessageParser<RealTimeNotify> _parser = new pb::MessageParser<RealTimeNotify>(() => new RealTimeNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RealTimeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeNotify(RealTimeNotify other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      isConnect_ = other.isConnect_;
      realTimeInfo_ = other.realTimeInfo_ != null ? other.realTimeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeNotify Clone() {
      return new RealTimeNotify(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.NotiHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NotiHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "IsConnect" field.</summary>
    public const int IsConnectFieldNumber = 2;
    private bool isConnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConnect {
      get { return isConnect_; }
      set {
        isConnect_ = value;
      }
    }

    /// <summary>Field number for the "realTimeInfo" field.</summary>
    public const int RealTimeInfoFieldNumber = 3;
    private global::Protocol.RealTimeInfo realTimeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RealTimeInfo RealTimeInfo {
      get { return realTimeInfo_; }
      set {
        realTimeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RealTimeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RealTimeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (IsConnect != other.IsConnect) return false;
      if (!object.Equals(RealTimeInfo, other.RealTimeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (IsConnect != false) hash ^= IsConnect.GetHashCode();
      if (realTimeInfo_ != null) hash ^= RealTimeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (IsConnect != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsConnect);
      }
      if (realTimeInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RealTimeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (IsConnect != false) {
        size += 1 + 1;
      }
      if (realTimeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealTimeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RealTimeNotify other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.NotiHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.IsConnect != false) {
        IsConnect = other.IsConnect;
      }
      if (other.realTimeInfo_ != null) {
        if (realTimeInfo_ == null) {
          RealTimeInfo = new global::Protocol.RealTimeInfo();
        }
        RealTimeInfo.MergeFrom(other.RealTimeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.NotiHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            IsConnect = input.ReadBool();
            break;
          }
          case 26: {
            if (realTimeInfo_ == null) {
              RealTimeInfo = new global::Protocol.RealTimeInfo();
            }
            input.ReadMessage(RealTimeInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PollMessageReq : pb::IMessage<PollMessageReq> {
    private static readonly pb::MessageParser<PollMessageReq> _parser = new pb::MessageParser<PollMessageReq>(() => new PollMessageReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PollMessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessageReq(PollMessageReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessageReq Clone() {
      return new PollMessageReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PollMessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PollMessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PollMessageReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PollMessageAck : pb::IMessage<PollMessageAck> {
    private static readonly pb::MessageParser<PollMessageAck> _parser = new pb::MessageParser<PollMessageAck>(() => new PollMessageAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PollMessageAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessageAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessageAck(PollMessageAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      total_ = other.total_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessageAck Clone() {
      return new PollMessageAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.PollMessageAck.Types.DataItem> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.PollMessageAck.Types.DataItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PollMessageAck.Types.DataItem> data_ = new pbc::RepeatedField<global::Protocol.PollMessageAck.Types.DataItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PollMessageAck.Types.DataItem> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PollMessageAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PollMessageAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Total != other.Total) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Total != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PollMessageAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PollMessageAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DataItem : pb::IMessage<DataItem> {
        private static readonly pb::MessageParser<DataItem> _parser = new pb::MessageParser<DataItem>(() => new DataItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.PollMessageAck.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataItem(DataItem other) : this() {
          text_ = other.text_;
          fromUid_ = other.fromUid_;
          toUid_ = other.toUid_;
          groupId_ = other.groupId_;
          messageType_ = other.messageType_;
          mediaUrl_ = other.mediaUrl_;
          createTime_ = other.createTime_;
          memtions_ = other.memtions_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataItem Clone() {
          return new DataItem(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fromUid" field.</summary>
        public const int FromUidFieldNumber = 2;
        private long fromUid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FromUid {
          get { return fromUid_; }
          set {
            fromUid_ = value;
          }
        }

        /// <summary>Field number for the "toUid" field.</summary>
        public const int ToUidFieldNumber = 3;
        private long toUid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ToUid {
          get { return toUid_; }
          set {
            toUid_ = value;
          }
        }

        /// <summary>Field number for the "groupId" field.</summary>
        public const int GroupIdFieldNumber = 4;
        private long groupId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long GroupId {
          get { return groupId_; }
          set {
            groupId_ = value;
          }
        }

        /// <summary>Field number for the "messageType" field.</summary>
        public const int MessageTypeFieldNumber = 5;
        private int messageType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MessageType {
          get { return messageType_; }
          set {
            messageType_ = value;
          }
        }

        /// <summary>Field number for the "mediaUrl" field.</summary>
        public const int MediaUrlFieldNumber = 6;
        private string mediaUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MediaUrl {
          get { return mediaUrl_; }
          set {
            mediaUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "createTime" field.</summary>
        public const int CreateTimeFieldNumber = 7;
        private long createTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CreateTime {
          get { return createTime_; }
          set {
            createTime_ = value;
          }
        }

        /// <summary>Field number for the "memtions" field.</summary>
        public const int MemtionsFieldNumber = 16;
        private static readonly pb::FieldCodec<string> _repeated_memtions_codec
            = pb::FieldCodec.ForString(130);
        private readonly pbc::RepeatedField<string> memtions_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Memtions {
          get { return memtions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Text != other.Text) return false;
          if (FromUid != other.FromUid) return false;
          if (ToUid != other.ToUid) return false;
          if (GroupId != other.GroupId) return false;
          if (MessageType != other.MessageType) return false;
          if (MediaUrl != other.MediaUrl) return false;
          if (CreateTime != other.CreateTime) return false;
          if(!memtions_.Equals(other.memtions_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (FromUid != 0L) hash ^= FromUid.GetHashCode();
          if (ToUid != 0L) hash ^= ToUid.GetHashCode();
          if (GroupId != 0L) hash ^= GroupId.GetHashCode();
          if (MessageType != 0) hash ^= MessageType.GetHashCode();
          if (MediaUrl.Length != 0) hash ^= MediaUrl.GetHashCode();
          if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
          hash ^= memtions_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Text.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (FromUid != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(FromUid);
          }
          if (ToUid != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(ToUid);
          }
          if (GroupId != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(GroupId);
          }
          if (MessageType != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(MessageType);
          }
          if (MediaUrl.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(MediaUrl);
          }
          if (CreateTime != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(CreateTime);
          }
          memtions_.WriteTo(output, _repeated_memtions_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (FromUid != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromUid);
          }
          if (ToUid != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToUid);
          }
          if (GroupId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
          }
          if (MessageType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageType);
          }
          if (MediaUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaUrl);
          }
          if (CreateTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
          }
          size += memtions_.CalculateSize(_repeated_memtions_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataItem other) {
          if (other == null) {
            return;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          if (other.FromUid != 0L) {
            FromUid = other.FromUid;
          }
          if (other.ToUid != 0L) {
            ToUid = other.ToUid;
          }
          if (other.GroupId != 0L) {
            GroupId = other.GroupId;
          }
          if (other.MessageType != 0) {
            MessageType = other.MessageType;
          }
          if (other.MediaUrl.Length != 0) {
            MediaUrl = other.MediaUrl;
          }
          if (other.CreateTime != 0L) {
            CreateTime = other.CreateTime;
          }
          memtions_.Add(other.memtions_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 16: {
                FromUid = input.ReadInt64();
                break;
              }
              case 24: {
                ToUid = input.ReadInt64();
                break;
              }
              case 32: {
                GroupId = input.ReadInt64();
                break;
              }
              case 40: {
                MessageType = input.ReadInt32();
                break;
              }
              case 50: {
                MediaUrl = input.ReadString();
                break;
              }
              case 56: {
                CreateTime = input.ReadInt64();
                break;
              }
              case 130: {
                memtions_.AddEntriesFrom(input, _repeated_memtions_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PollReq : pb::IMessage<PollReq> {
    private static readonly pb::MessageParser<PollReq> _parser = new pb::MessageParser<PollReq>(() => new PollReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PollReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollReq(PollReq other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollReq Clone() {
      return new PollReq(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.ReqHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReqHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PollReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PollReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PollReq other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.ReqHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.ReqHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///根据轮询结果请求相应消息数据
  /// </summary>
  public sealed partial class PollAck : pb::IMessage<PollAck> {
    private static readonly pb::MessageParser<PollAck> _parser = new pb::MessageParser<PollAck>(() => new PollAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PollAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ChatReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollAck(PollAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      msgs_ = other.msgs_.Clone();
      realTime_ = other.realTime_ != null ? other.realTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollAck Clone() {
      return new PollAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Protocol.AckHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AckHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "msgs" field.</summary>
    public const int MsgsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.PollAck.Types.Message> _repeated_msgs_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.PollAck.Types.Message.Parser);
    private readonly pbc::RepeatedField<global::Protocol.PollAck.Types.Message> msgs_ = new pbc::RepeatedField<global::Protocol.PollAck.Types.Message>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.PollAck.Types.Message> Msgs {
      get { return msgs_; }
    }

    /// <summary>Field number for the "realTime" field.</summary>
    public const int RealTimeFieldNumber = 3;
    private global::Protocol.PollAck.Types.RealTime realTime_;
    /// <summary>
    ///yin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PollAck.Types.RealTime RealTime {
      get { return realTime_; }
      set {
        realTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PollAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PollAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!msgs_.Equals(other.msgs_)) return false;
      if (!object.Equals(RealTime, other.RealTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= msgs_.GetHashCode();
      if (realTime_ != null) hash ^= RealTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      msgs_.WriteTo(output, _repeated_msgs_codec);
      if (realTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RealTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += msgs_.CalculateSize(_repeated_msgs_codec);
      if (realTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PollAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Protocol.AckHeader();
        }
        Header.MergeFrom(other.Header);
      }
      msgs_.Add(other.msgs_);
      if (other.realTime_ != null) {
        if (realTime_ == null) {
          RealTime = new global::Protocol.PollAck.Types.RealTime();
        }
        RealTime.MergeFrom(other.RealTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Protocol.AckHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            msgs_.AddEntriesFrom(input, _repeated_msgs_codec);
            break;
          }
          case 26: {
            if (realTime_ == null) {
              RealTime = new global::Protocol.PollAck.Types.RealTime();
            }
            input.ReadMessage(RealTime);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PollAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Message : pb::IMessage<Message> {
        private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Message> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.PollAck.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message(Message other) : this() {
          count_ = other.count_;
          messageKind_ = other.messageKind_;
          groupId_ = other.groupId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message Clone() {
          return new Message(this);
        }

        /// <summary>Field number for the "Count" field.</summary>
        public const int CountFieldNumber = 1;
        private int count_;
        /// <summary>
        ///消息数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "messageKind" field.</summary>
        public const int MessageKindFieldNumber = 2;
        private int messageKind_;
        /// <summary>
        ///消息类型 1=用户消息 2=群消息 3= 添加联系人 4=添加联系人成功
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MessageKind {
          get { return messageKind_; }
          set {
            messageKind_ = value;
          }
        }

        /// <summary>Field number for the "groupId" field.</summary>
        public const int GroupIdFieldNumber = 3;
        private string groupId_ = "";
        /// <summary>
        ///群id（如果是群消息）
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return groupId_; }
          set {
            groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Message);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Message other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Count != other.Count) return false;
          if (MessageKind != other.MessageKind) return false;
          if (GroupId != other.GroupId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Count != 0) hash ^= Count.GetHashCode();
          if (MessageKind != 0) hash ^= MessageKind.GetHashCode();
          if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Count != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Count);
          }
          if (MessageKind != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(MessageKind);
          }
          if (GroupId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(GroupId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
          }
          if (MessageKind != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageKind);
          }
          if (GroupId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Message other) {
          if (other == null) {
            return;
          }
          if (other.Count != 0) {
            Count = other.Count;
          }
          if (other.MessageKind != 0) {
            MessageKind = other.MessageKind;
          }
          if (other.GroupId.Length != 0) {
            GroupId = other.GroupId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Count = input.ReadInt32();
                break;
              }
              case 16: {
                MessageKind = input.ReadInt32();
                break;
              }
              case 26: {
                GroupId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RealTime : pb::IMessage<RealTime> {
        private static readonly pb::MessageParser<RealTime> _parser = new pb::MessageParser<RealTime>(() => new RealTime());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RealTime> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.PollAck.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RealTime() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RealTime(RealTime other) : this() {
          isConnect_ = other.isConnect_;
          realTimeInfo_ = other.realTimeInfo_ != null ? other.realTimeInfo_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RealTime Clone() {
          return new RealTime(this);
        }

        /// <summary>Field number for the "IsConnect" field.</summary>
        public const int IsConnectFieldNumber = 2;
        private bool isConnect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsConnect {
          get { return isConnect_; }
          set {
            isConnect_ = value;
          }
        }

        /// <summary>Field number for the "realTimeInfo" field.</summary>
        public const int RealTimeInfoFieldNumber = 3;
        private global::Protocol.RealTimeInfo realTimeInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.RealTimeInfo RealTimeInfo {
          get { return realTimeInfo_; }
          set {
            realTimeInfo_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RealTime);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RealTime other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (IsConnect != other.IsConnect) return false;
          if (!object.Equals(RealTimeInfo, other.RealTimeInfo)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (IsConnect != false) hash ^= IsConnect.GetHashCode();
          if (realTimeInfo_ != null) hash ^= RealTimeInfo.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (IsConnect != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsConnect);
          }
          if (realTimeInfo_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(RealTimeInfo);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (IsConnect != false) {
            size += 1 + 1;
          }
          if (realTimeInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealTimeInfo);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RealTime other) {
          if (other == null) {
            return;
          }
          if (other.IsConnect != false) {
            IsConnect = other.IsConnect;
          }
          if (other.realTimeInfo_ != null) {
            if (realTimeInfo_ == null) {
              RealTimeInfo = new global::Protocol.RealTimeInfo();
            }
            RealTimeInfo.MergeFrom(other.RealTimeInfo);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                IsConnect = input.ReadBool();
                break;
              }
              case 26: {
                if (realTimeInfo_ == null) {
                  RealTimeInfo = new global::Protocol.RealTimeInfo();
                }
                input.ReadMessage(RealTimeInfo);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
