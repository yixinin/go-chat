syntax = "proto3";
package protocol;

import "header.proto";

enum MessageType {
    None    = 0;
    Text    = 1;
    Pictrue = 2;
    Audio   = 3;
    Video   = 4;
    Link    = 5;
}

message SendMessageReq {
    ReqHeader   header        = 1;
    MessageType messageType   = 2;
    string      textMessage   = 3;
    repeated string memtions  = 4;
    string          contactId = 5; //发送给用户
    string          username  = 6; //发送给陌生人 //通过群聊
    string          groupId   = 7; //发送给群聊
}

message SendMessageAck {
    AckHeader header = 1;
}

message RealTimeReq {
    ReqHeader header   = 1;
    int64     uid      = 2; //请求和用户通话
    string    groupId  = 3; //请求视频会议
    string    protocol = 4; //协议
}

message RealTimeAck {
    AckHeader header   = 1;
    string    tcpAddr  = 2; //服务器连接地址
    string    token    = 3; //本次连接token
    int32     roomId   = 4; //房间id
    string    wsAddr   = 5;
    string    httpAddr = 6;
}

message SimpleUser {
    string nickname = 1;
    string avatart  = 2;
}

message RealTimeInfo {
    string   wsAddr              = 1;
    string   tcpAddr             = 2; //服务器连接地址
    string   token               = 3; //本次连接token
    int32    roomId              = 4; //房间id
    int64    uid                 = 5; //来自用户
    string   groupId             = 6; //来自群聊
    repeated SimpleUser users    = 7; //用户/群名称
    string              httpAddr = 8;
}

message CancelRealTimeReq {
    ReqHeader header = 1;
}

message CancelRealTimeAck {
    AckHeader header = 1;
}

message RealTimeNotify {
    NotiHeader   header       = 1;
    bool         IsConnect    = 2;
    RealTimeInfo realTimeInfo = 3;
}

message PollMessageReq {
    ReqHeader header = 1;
}

message PollMessageAck {
    AckHeader header       = 1;
    int32     total        = 2;
    repeated DataItem data = 3;
    message           DataItem {
        string   text            = 1;
        int64    fromUid         = 2;
        int64    toUid           = 3;
        int64    groupId         = 4;
        int32    messageType     = 5;
        string   mediaUrl        = 6;
        int64    createTime      = 7;
        repeated string memtions = 16;
    }
}

message PollReq {
    ReqHeader header = 1;
}

//根据轮询结果请求相应消息数据
message PollAck {
    AckHeader header          = 1;
    repeated Message msgs     = 2;
    RealTime         realTime = 3; //yin
    message          Message {
        int32  Count       = 1; //消息数量
        int32  messageKind = 2; //消息类型 1=用户消息 2=群消息 3= 添加联系人 4=添加联系人成功
        string groupId     = 3; //群id（如果是群消息）
    }
    message RealTime {
        bool         IsConnect    = 2;
        RealTimeInfo realTimeInfo = 3;
    }
}