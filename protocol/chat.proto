syntax = "proto3";
package protocol;

import "header.proto";

// enum MessageType {
//     None    = 0;
//     Text    = 1;
//     Pictrue = 2;
//     Audio   = 3;
//     Video   = 4;
//     Link    = 5;
// }

message Memtion {
    int64  userId = 1; // uid
    string text   = 2; //@xxx
}
message MessageBody {
    int32    messageType      = 2;
    string   text             = 3;
    repeated Memtion memtions = 4;
    int64            toUserId = 5; //发送给用户
    // int64            fromUserId  = 6; //发送者
    int64 fromGroupId = 7; //通过群
    int64 toGroupId   = 8; //发送给群聊
}

message SendMessageReq {
    ReqHeader   header = 1;
    MessageBody body   = 2;
}

message SendMessageAck {
    AckHeader header = 1;
}

message MessageNotify {
    NotifyHeader header     = 1;
    MessageBody  body       = 2;
    int64        fromUserId = 3;
    string       avatar     = 4;
    string       nickname   = 5;
}

message RealTimeReq {
    ReqHeader header  = 1;
    int64     userId  = 2; //请求和用户通话
    int64     groupId = 3; //请求视频会议
}

message RealTimeAck {
    AckHeader header   = 1;
    string    tcpAddr  = 2; //服务器连接地址
    string    token    = 3; //本次连接token
    int32     roomId   = 4; //房间id
    string    wsAddr   = 5;
    string    httpAddr = 6;
}

message SimpleUser {
    string nickname = 1;
    string avatart  = 2;
    int64  userId   = 3;
}

message RealTimeInfo {
    string   token               = 3; //本次连接token
    int32    roomId              = 4; //房间id
    int64    userId              = 5; //来自用户
    int64    groupId             = 6; //来自群聊
    repeated SimpleUser users    = 7; //用户/群名称
    string              httpAddr = 8;
    string              wsAddr   = 1;
    string              tcpAddr  = 2; //服务器连接地址
}

message CancelRealTimeReq {
    ReqHeader header = 1;
}

message CancelRealTimeAck {
    AckHeader header = 1;
}

message RealTimeNotify {
    NotifyHeader header       = 1;
    bool         IsConnect    = 4; //false时断开连接
    RealTimeInfo realTimeInfo = 5;
}

// message PollMessageReq {
//     ReqHeader header = 1;
// }

// message PollMessageAck {
//     AckHeader header             = 1;
//     int32     total              = 2;
//     repeated MessageAckBody data = 3;
// }

message PollReq {
    ReqHeader header = 1;
}

//根据轮询结果请求相应消息数据
message PollAck {
    AckHeader header          = 1;
    repeated Message msgs     = 2;
    RealTime         realTime = 3; //yin
    message          Message {
        int32  Count       = 1; //消息数量
        int32  messageKind = 2; //消息类型 1=用户消息 2=群消息 3= 添加联系人 4=添加联系人成功
        string groupId     = 3; //群id（如果是群消息）
    }
    message RealTime {
        bool         IsConnect    = 2;
        RealTimeInfo realTimeInfo = 3;
    }
}

//获取消息列表
message GetMessageUserReq {
    ReqHeader header = 1;
}

message GetMessageUserAck {
    AckHeader header           = 1;
    repeated MessageUser users = 2;
    message              MessageUser {
        int64    userId                  = 1;  //用户消息
        int64    groupId                 = 2;  //群消息
        string   nickname                = 3;  //昵称
        string   avatar                  = 4;  //头像
        int32    count                   = 6;  //消息条数
        int64    fromGroupId             = 7;  //通过群聊发的消息
        repeated MessageAckBody messages = 10; //消息列表
    }
}

message GetMessageReq {
    ReqHeader header  = 1;
    int64     userId  = 2; //获取用户消息记录
    int64     groupId = 3; //获取群消息记录
}

message MessageAckBody {
    string   text             = 1;
    int64    fromUid          = 2;
    int64    toUid            = 3;
    int64    groupId          = 4;
    int32    messageType      = 5;
    string   mediaUrl         = 6;
    int64    createTime       = 7;
    int64    updateTime       = 8;
    repeated Memtion memtions = 16;
}

message GetMessageAck {
    AckHeader header                 = 1;
    repeated MessageAckBody messages = 2;
    // int64                   userId   = 3; //获取用户消息记录
    // int64                   groupId  = 4; //获取群消息记录
}

message SetReadReq {
    ReqHeader header = 1;
    int64     userId = 2; //用户已读
}

message SetReadAck {
    AckHeader header = 1;
}